// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  VDI-VL17-109
// DateTime: 24/03/2017 3:15:36 PM
// UserName: n9548548
// Input file <parser.y - 23/03/2017 10:38:59 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GPLexTutorial
{
public enum Tokens {
    error=127,EOF=128,IDENT=129,HexIntegerLiteral=130,StringLiteral=131,DecimalIntegerLiteral=132,
    NIL=133,SEPARATOR=134,OPERATOR=135,CharacterLiteral=136,SingleCharacter=137,BooleanLiteral=138,
    FloatingPointLiteral=139,ABSTRACT=140,ASSERT=141,BOOLEAN=142,BREAK=143,BYTE=144,
    CASE=145,CATCH=146,CHAR=147,CLASS=148,CONST=149,CONTINUE=150,
    DEFAULT=151,DO=152,DOUBLE=153,ENUM=154,ELSE=155,EXTENDS=156,
    FINAL=157,FINALLY=158,FLOAT=159,FOR=160,GOTO=161,IF=162,
    INT=163,IMPLEMENTS=164,IMPORT=165,INSTANCEOF=166,INTERFACE=167,LONG=168,
    NATIVE=169,NEW=170,PACKAGE=171,PRIVATE=172,PROTECTED=173,PUBLIC=174,
    RETURN=175,SHORT=176,STATIC=177,STRICTFP=178,SUPER=179,SWITCH=180,
    SYNCHRONIZED=181,THIS=182,THROW=183,THROWS=184,TRANSIENT=185,TRY=186,
    VOID=187,VOLATILE=188,WHILE=189,COMMENT=190};

public struct ValueType
#line 4 "parser.y"
{
    public int num;
    public string name;
	//frank week3
    public string nil;
    public string esfcasl;
    public string separators;
    public string operators;
    //frank week3

	//Charles week3
	public string keyword;
	public string comment;
	//Charles week3
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[23];
  private static State[] states = new State[38];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Statement", "Expression", "StatementList", "Type", 
      };

  static Parser() {
    states[0] = new State(new int[]{162,4,123,11,129,27,130,28,132,29,139,30,131,31,136,32,163,36,138,37,59,-11,61,-11,43,-11,60,-11,62,-11,135,-11},new int[]{-1,1,-3,3,-4,15,-6,33});
    states[1] = new State(new int[]{128,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{40,5});
    states[5] = new State(new int[]{129,27,130,28,132,29,139,30,131,31,136,32,41,-11,61,-11,43,-11,60,-11,62,-11,135,-11},new int[]{-4,6});
    states[6] = new State(new int[]{41,7,61,17,43,19,60,21,62,23,135,25});
    states[7] = new State(new int[]{162,4,123,11,129,27,130,28,132,29,139,30,131,31,136,32,163,36,138,37,59,-11,61,-11,43,-11,60,-11,62,-11,135,-11},new int[]{-3,8,-4,15,-6,33});
    states[8] = new State(new int[]{155,9});
    states[9] = new State(new int[]{162,4,123,11,129,27,130,28,132,29,139,30,131,31,136,32,163,36,138,37,59,-11,61,-11,43,-11,60,-11,62,-11,135,-11},new int[]{-3,10,-4,15,-6,33});
    states[10] = new State(-3);
    states[11] = new State(-10,new int[]{-5,12});
    states[12] = new State(new int[]{125,13,162,4,123,11,129,27,130,28,132,29,139,30,131,31,136,32,163,36,138,37,59,-11,61,-11,43,-11,60,-11,62,-11,135,-11},new int[]{-3,14,-4,15,-6,33});
    states[13] = new State(-4);
    states[14] = new State(-9);
    states[15] = new State(new int[]{59,16,61,17,43,19,60,21,62,23,135,25});
    states[16] = new State(-5);
    states[17] = new State(new int[]{129,27,130,28,132,29,139,30,131,31,136,32,61,-11,43,-11,60,-11,62,-11,135,-11,59,-11,41,-11},new int[]{-4,18});
    states[18] = new State(new int[]{61,-18,43,19,60,21,62,23,135,25,59,-18,41,-18});
    states[19] = new State(new int[]{129,27,130,28,132,29,139,30,131,31,136,32,61,-11,43,-11,60,-11,62,-11,135,-11,59,-11,41,-11},new int[]{-4,20});
    states[20] = new State(new int[]{61,-19,43,-19,60,-19,62,23,135,25,59,-19,41,-19});
    states[21] = new State(new int[]{129,27,130,28,132,29,139,30,131,31,136,32,61,-11,43,-11,60,-11,62,-11,135,-11,59,-11,41,-11},new int[]{-4,22});
    states[22] = new State(new int[]{61,-20,43,19,41,-20,62,23,135,25,59,-20});
    states[23] = new State(new int[]{129,27,130,28,132,29,139,30,131,31,136,32,61,-11,43,-11,60,-11,62,-11,135,-11,59,-11,41,-11},new int[]{-4,24});
    states[24] = new State(new int[]{61,17,43,19,60,21,62,23,135,25,59,-21,41,-21});
    states[25] = new State(new int[]{129,27,130,28,132,29,139,30,131,31,136,32,61,-11,43,-11,60,-11,62,-11,135,-11,59,-11,41,-11},new int[]{-4,26});
    states[26] = new State(new int[]{61,17,43,19,60,21,62,23,135,25,59,-22,41,-22});
    states[27] = new State(-12);
    states[28] = new State(-13);
    states[29] = new State(-14);
    states[30] = new State(-15);
    states[31] = new State(-16);
    states[32] = new State(-17);
    states[33] = new State(new int[]{129,34});
    states[34] = new State(new int[]{59,35});
    states[35] = new State(-6);
    states[36] = new State(-7);
    states[37] = new State(-8);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,128});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{162,40,-4,41,-3,155,-3});
    rules[4] = new Rule(-3, new int[]{123,-5,125});
    rules[5] = new Rule(-3, new int[]{-4,59});
    rules[6] = new Rule(-3, new int[]{-6,129,59});
    rules[7] = new Rule(-6, new int[]{163});
    rules[8] = new Rule(-6, new int[]{138});
    rules[9] = new Rule(-5, new int[]{-5,-3});
    rules[10] = new Rule(-5, new int[]{});
    rules[11] = new Rule(-4, new int[]{});
    rules[12] = new Rule(-4, new int[]{129});
    rules[13] = new Rule(-4, new int[]{130});
    rules[14] = new Rule(-4, new int[]{132});
    rules[15] = new Rule(-4, new int[]{139});
    rules[16] = new Rule(-4, new int[]{131});
    rules[17] = new Rule(-4, new int[]{136});
    rules[18] = new Rule(-4, new int[]{-4,61,-4});
    rules[19] = new Rule(-4, new int[]{-4,43,-4});
    rules[20] = new Rule(-4, new int[]{-4,60,-4});
    rules[21] = new Rule(-4, new int[]{-4,62,-4});
    rules[22] = new Rule(-4, new int[]{-4,135,-4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 98 "parser.y"

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
